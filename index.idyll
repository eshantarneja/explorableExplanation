[meta title:"Idyll" description:"Short description of your project" /]

[Header
  fullWidth:true
  title:"Network Flow"
  subtitle:"Introduction to Network Flow, Max-Flow/Min-Cut, and the Ford-Fulkerson Algorithm"
  author:"Eshan Tarneja, Alex Alwan, Michael Tamkin"
  date:`(new Date()).toDateString()`
  background:"#222222"
  color:"#ffffff"
   /]

## Introduction

This is an Idyll scrolly-telling post. It is generated via
the file `index.idyll`. To compile this post using
idyll, run the command `idyll` inside of this directory.

Idyll posts are designed to support interaction and
data-driven graphics.

Configuration can be done via the `idyll` field in `package.json`.

[var name:"state" value:-1 /]

[Scroller currentStep:state]

  [Graphic className:"d3-component-container"]
    [CustomD3Component className:"d3-component" state:`state` /]
  [/Graphic]


  [Step]
  
    ## Understanding Network Graphs (wait for animation to begin)


    The key parts of network graphs are nodes, edges, and capacities. 

    Every edge within the network is directed (flow can only move one direction through an edge).  Additionally, each edge has a fixed capacity. The amount of flow through an edge cannot exceed the capacity of the edge.  

    Furthermore, a flow must satisfy the restriction that the amount of flow into a node equals the amount of flow out of it.  That is unless the node is a source (start of the flow), which only has outgoing flow, or a sink (end of the flow), which only has incoming flow. 

  [/Step]

  [Step]

  Add some stuff here!

  [/Step]


  [Step]
    ## Components

    [Display value:state /]

    Components can be embedded using a bracket syntax:

    ```
    [Range /]
    ```

    and can contain nested content:

    ```
    [Equation]e = mc^{2}[/Equation]
    ```

    Components accept properties:

    ```
    [Range value:x min:0 max:1 /]
    ```

    that can be bound to variables to achieve interactivity (more in next section).


    A variety of components are included by default. See [all the available components](https://idyll-lang.org/docs/components/). You can also use any html tag, for example: `[div] A div! [/div]`.

    To create your own, add it to the `components/` folder. There are examples of how to use Idyll with React and D3 based components already included.
  
  [/Step]

  [Step]
    ## Interactivity

    [Display value:state /]

    Here is how you can instantiate a variable and bind it to a component:

    [var name:"exampleVar" value:5 /]

    [Range min:0 max:10 value:exampleVar /]
    [Display value:exampleVar /]

    ```
    [var name:"exampleVar" value:5 /]

    [Range min:0 max:10 value:exampleVar /]
    [Display value:exampleVar /]
    ```
  [/Step]

[/Scroller]

